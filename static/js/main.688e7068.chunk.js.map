{"version":3,"sources":["Configure.js","utils.js","HDwallet.js","IPFS.js","OpenLaw.js","IDregistry.js","AuditLog.js","App.js","serviceWorker.js","index.js"],"names":["Configure","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateLocalStorage","localStorage","setItem","consortiaId","current","value","appCredsUsername","appCredsPassword","nodeRpcEndpoint","hdwalletRpcEndpoint","hdwalletWalletId","ipfsRpcEndpoint","openlawRpcEndpoint","alert","React","createRef","getItem","_this2","react_default","a","createElement","className","type","ref","onClick","Component","utils","bindLocalStorage","t","buildWeb3","priv","getContract","web3","contract","contractAddress","contractArgs","abi","JSON","parse","bytecode","ret","eth","Contract","deploy","data","arguments","buildServiceUrlWithCreds","serviceRpcEndpoint","prefix","startsWith","concat","replace","Web3","HDwallet","componentDidMount","blockExplorerUrl","endsWith","setState","msg","missingConfig","msgChanged","event","val","target","lockMsg","locked","fetchHdwallet","hdwalletAddress","hdwalletPrivateKey","fetchingHdwalletIndex","asyncToGenerator","regenerator_default","mark","_callee","hwa","wrap","_context","prev","next","hasHdwalletIndex","getHdwalletAccount","state","hdwalletIndex","sent","address","privateKey","stop","hdwalletIndexChanged","deployingContract","contractDeploying","deployContract","params","gas","contractJson","encodeABI","accounts","signTransaction","then","signed","sendSignedTransaction","rawTransaction","on","receipt","console","log","err","error","newInstance","contractFrom","from","transactionHash","getContractValue","methods","get","contractValue","hdwalletAccountIndex","headers","Headers","append","btoa","fetch","method","response","json","assertThisInitialized","Link","to","disabled","onChange","rows","min","max","readOnly","href","substr","IPFS","fileChangedHandler","file","files","selectedFile","uploadToIpfs","uploadingFile","formData","FormData","body","r","ipfsLink","ipfsHash","Hash","uploadedFile","fileDescriptionChanged","fileDescription","getContractValues","contractFileDescription","contractIpfsHash","downloadFile","url","personal","getAccounts","length","theContract","deployObj","sendTransaction","_this3","fileRef","rel","OpenLaw","openlawUrl","openlawTemplateUrl","sampleAgreement","sampleAgreementTitle","IDregistry","AuditLog","getNumberOfRecords","clearContract","removeItem","window","location","reload","validMsg","isJSON","str","e","addMsg","addingMsg","push","send","resp","auditRecordCount","fetchRecord","index","fetchingRecord","viewJsonMessage","_callee2","record","_context2","logEntries","viewRecordId","viewPrettyJson","payload","viewRecordEntityAddress","entityAddress","contractExistsInLocalStorage","getSize","records","Number","parseInt","_loop","i","color","dist","key","title","iconColor","_this4","style","overflowY","maxHeight","renderTimelines","JSONPretty_default","id","App","BrowserRouter","basename","process","integrity","crossOrigin","Route","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.688e7068.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import { PrimaryButton } from '@photic/design-kit';\n\nclass Configure extends Component {\n  constructor(props) {\n    super(props)\n    this.consortiaId = React.createRef()\n    this.appCredsUsername = React.createRef()\n    this.appCredsPassword = React.createRef()\n    this.nodeRpcEndpoint = React.createRef()\n    this.hdwalletRpcEndpoint = React.createRef()\n    this.hdwalletWalletId = React.createRef()\n    this.ipfsRpcEndpoint = React.createRef()\n    this.openlawRpcEndpoint = React.createRef()\n  }\n\n  componentDidMount() {\n    this.consortiaId.current.value = localStorage.getItem('consortiaId');\n    this.appCredsUsername.current.value = localStorage.getItem('appCredsUsername');\n    this.appCredsPassword.current.value = localStorage.getItem('appCredsPassword');\n    this.nodeRpcEndpoint.current.value = localStorage.getItem('nodeRpcEndpoint');\n    this.hdwalletRpcEndpoint.current.value = localStorage.getItem('hdwalletRpcEndpoint');\n    this.hdwalletWalletId.current.value = localStorage.getItem('hdwalletWalletId');\n    this.ipfsRpcEndpoint.current.value = localStorage.getItem('ipfsRpcEndpoint');\n    this.openlawRpcEndpoint.current.value = localStorage.getItem('openlawRpcEndpoint');\n  }\n\n  updateLocalStorage = () => {\n    localStorage.setItem('consortiaId', this.consortiaId.current.value);\n    localStorage.setItem('appCredsUsername', this.appCredsUsername.current.value);\n    localStorage.setItem('appCredsPassword', this.appCredsPassword.current.value);\n    localStorage.setItem('nodeRpcEndpoint', this.nodeRpcEndpoint.current.value);\n    localStorage.setItem('hdwalletRpcEndpoint', this.hdwalletRpcEndpoint.current.value);\n    localStorage.setItem('hdwalletWalletId', this.hdwalletWalletId.current.value);\n    localStorage.setItem('ipfsRpcEndpoint', this.ipfsRpcEndpoint.current.value);\n    localStorage.setItem('openlawRpcEndpoint', this.openlawRpcEndpoint.current.value);\n    alert('latest settings saved!')\n  }\n\n  render() {\n    return (\n      <main className=\"container\">\n        <h2>Configure</h2>\n        <h5>\n          This is needed so the samples can connect to your Kaleido environment. All information will be\n          persisted to browser local storage.\n        </h5>\n        <br />\n        <h5>Shared</h5>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">Consortia ID</label>\n          <div className=\"col-sm-4\">\n            <input type=\"text\" className=\"form-control col-sm-12\" ref={this.consortiaId} />\n            <small>(ex: zzabcd1234)</small>\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">App credentials username</label>\n          <div className=\"col-sm-4\">\n            <input type=\"text\" className=\"form-control col-sm-12\" ref={this.appCredsUsername} />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">App credentials password</label>\n          <div className=\"col-sm-6\">\n            <input type=\"password\" className=\"form-control col-sm-12\" ref={this.appCredsPassword} />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">Node RPC endpoint</label>\n          <div className=\"col-sm-6\">\n            <input type=\"text\" className=\"form-control col-sm-12\" ref={this.nodeRpcEndpoint} />\n            <small>(ex: http://zz..-zz..-rpc.photic-local.io)</small>\n          </div>\n        </div>\n        <h5>HDWallet</h5>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">HDWallet RPC endpoint</label>\n          <div className=\"col-sm-6\">\n            <input type=\"text\" className=\"form-control col-sm-12\" ref={this.hdwalletRpcEndpoint} />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">HDWallet wallet ID</label>\n          <div className=\"col-sm-4\">\n            <input type=\"text\" className=\"form-control col-sm-12\" ref={this.hdwalletWalletId} />\n          </div>\n        </div>\n        <h5>IPFS</h5>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">IPFS RPC endpoint</label>\n          <div className=\"col-sm-6\">\n            <input type=\"text\" className=\"form-control col-sm-12\" ref={this.ipfsRpcEndpoint} />\n            <small>(ex: http://zz..-zz..-ipfs.photic-local.io/api/v0)</small>\n          </div>\n        </div>\n        <h5>OpenLaw</h5>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">OpenLaw RPC endpoint</label>\n          <div className=\"col-sm-6\">\n            <input type=\"text\" className=\"form-control col-sm-12\" ref={this.openlawRpcEndpoint} />\n            <small>(ex: http://zz..-zz..-openlaw.photic-local.io)</small>\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <div className=\"col-sm-6\">\n          <button type=\"button\"className=\"btn btn-success\" onClick={() => this.updateLocalStorage()}>\n            Save\n          </button>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Configure;\n","import Web3 from 'web3'\n\nconst utils = {\n  bindLocalStorage(t) {\n    t.consortiaId = localStorage.getItem('consortiaId');\n    t.appCredsUsername = localStorage.getItem('appCredsUsername');\n    t.appCredsPassword = localStorage.getItem('appCredsPassword');\n    t.nodeRpcEndpoint = localStorage.getItem('nodeRpcEndpoint');\n    t.hdwalletRpcEndpoint = localStorage.getItem('hdwalletRpcEndpoint');\n    t.hdwalletWalletId = localStorage.getItem('hdwalletWalletId');\n    t.ipfsRpcEndpoint = localStorage.getItem('ipfsRpcEndpoint');\n    t.openlawRpcEndpoint = localStorage.getItem('openlawRpcEndpoint');\n  },\n\n  buildWeb3(t) {\n    if (t.appCredsUsername && t.appCredsPassword && t.nodeRpcEndpoint) {\n      priv.buildWeb3(t)\n    }\n  },\n\n  getContract(web3, contract, contractAddress, contractArgs) {\n    let abi = JSON.parse(contract.abi);\n    let bytecode = '0x' + contract.bytecode;\n    let ret = new web3.eth.Contract(abi, contractAddress);\n    if (!contractAddress) {\n      // this is a new deployment, build the deploy object\n      ret = ret.deploy({\n        data: bytecode,\n        arguments: contractArgs\n      });\n    }\n    return ret;\n  },\n\n  buildServiceUrlWithCreds(t, serviceRpcEndpoint) {\n    let prefix = serviceRpcEndpoint.startsWith('http://') ? 'http://' : 'https://'\n    return `${prefix}${t.appCredsUsername}:${t.appCredsPassword}@${serviceRpcEndpoint.replace(prefix, '')}`\n  }\n}\n\nconst priv = {\n  buildWeb3(t) {\n    t.web3 = new Web3(utils.buildServiceUrlWithCreds(t, t.nodeRpcEndpoint))\n  }\n}\n\nexport default utils ","import React, { Component } from 'react';\nimport contractJson from './contracts/hdwallet.json'\nimport { Link } from 'react-router-dom';\n// import { sha256 } from 'js-sha256'\nimport utils from './utils'\n\nclass HDwallet extends Component {\n  constructor(props) {\n    super(props)\n    utils.bindLocalStorage(this)\n    utils.buildWeb3(this)\n    this.state = { \n      missingConfig: false,    \n      msg: '',\n      locked: false,\n      hdwalletAddress: '',\n      hdwalletPrivateKey: '',\n      hdwalletIndex: '',\n      fetchingHdwalletIndex: false,\n      contractDeploying: false,\n      contractAddress: '',\n      contractFrom: '',\n      contractValue: '',\n      transactionHash: ''\n    }\n  }\n\n  componentDidMount = () => {\n    if (!this.consortiaId || !this.appCredsUsername || !this.appCredsPassword || \n      !this.nodeRpcEndpoint || !this.hdwalletRpcEndpoint || !this.hdwalletWalletId) {\n      this.setState(() => ({\n        missingConfig: true\n      }))\n      return\n    }\n    this.blockExplorerUrl = this.nodeRpcEndpoint.endsWith('dev.photic.io') ? 'explorer-dev.photic.io' : 'explorer.kaleido.io'\n    this.setState(() => ({\n      msg: \"Sample message\"\n    }))\n  }\n\n  msgChanged = (event) => {\n    const val = event.target.value\n    this.setState(() => ({\n      msg: val\n    }));\n  };\n\n  lockMsg = () => {\n    this.setState(() => ({\n      locked: true\n    }));\n  };\n\n  fetchHdwallet = () => {\n    this.setState(() => ({\n      hdwalletAddress: '',\n      hdwalletPrivateKey: '',\n      fetchingHdwalletIndex: true\n    }), async () => {\n      if (this.hasHdwalletIndex()) {\n        let hwa = await this.getHdwalletAccount(this.state.hdwalletIndex)\n        this.setState(() => ({\n          hdwalletAddress: hwa.address,\n          hdwalletPrivateKey: hwa.privateKey,\n          fetchingHdwalletIndex: false\n        }));\n      }\n    });\n  }\n\n  hasHdwalletIndex = () => {\n    return this.state.hdwalletIndex && this.state.hdwalletIndex >= 0\n  }\n\n  hdwalletIndexChanged = (event) => {\n    const val = event.target.value\n    this.setState(() => ({\n      hdwalletIndex: val\n    }));\n  };\n  \n  deployingContract = () => {\n    this.setState(() => ({\n      contractDeploying: true\n    }), () => this.deployContract());\n  }\n\n  deployContract = () => {\n    let theContract = utils.getContract(this.web3, contractJson, '', [this.state.msg]);\n    let deployObj = theContract.encodeABI();\n    let params = {\n      gas: 500000000,\n      data: deployObj\n    };\n    this.web3.eth.accounts.signTransaction(params, `0x${this.state.hdwalletPrivateKey}`).then((signed) => {\n      this.web3.eth.sendSignedTransaction(signed.rawTransaction)\n        .on('receipt', (receipt) => {\n          console.log(receipt);\n        })\n        .on('error', (err) => {\n          console.error('Failed to deploy the smart contract. Error: ' + err);\n        })\n        .then((newInstance) => {\n          console.log(newInstance)\n          console.log(`\\tSmart contract deployed, ready to take calls at '${newInstance.contractAddress}'`);\n          this.setState(() => ({\n            contractAddress: newInstance.contractAddress,\n            contractFrom: newInstance.from,\n            transactionHash: newInstance.transactionHash\n          }));\n        });\n    });\n  }\n\n  getContractValue = () => {\n    let theContract = utils.getContract(this.web3, contractJson, this.state.contractAddress, []);\n    theContract.methods.get().call().then((value) => {\n      console.log('\\tSmart contract current state: %j', value);\n      this.setState(() => ({\n        contractValue: value\n      }));\n    });\n  }\n\n  getHdwalletAccount = (hdwalletAccountIndex) => {\n    console.log('fetching hd wallet account to use')\n    const headers = new Headers();\n    headers.append('Authorization', 'Basic ' + btoa(this.appCredsUsername + ':' + this.appCredsPassword));\n    headers.append('content-type', 'application/json')\n    headers.append('Accept', 'application/json, text/plain, */*',)\n    return fetch(`${this.hdwalletRpcEndpoint}/wallets/${this.hdwalletWalletId}/accounts/${hdwalletAccountIndex}`, {\n      method: 'GET',\n      headers: headers\n    }).then(response => response.json())\n  }\n  \n  render() {\n    if (this.state.missingConfig) {\n      return (\n        <main>\n          <div className=\"container\">\n            <h2>HDWallet</h2>\n            missing&nbsp;\n            <Link to=\"/\">\n              config\n            </Link>\n          </div>\n        </main>\n      )\n    }\n    return (\n      <main className=\"container\">\n        <h2>HDWallet</h2>\n        <h5>\n          The purpose of this sample is to show how you can anonymously submit a transaction to the blockchain. We will deploy a \n          simple smart contract which stores and exposes a single value. \n        </h5>\n        <br />\n        <h6>\n          Step 1: Enter a message. This message is the value that will be included in the smart contract when we deploy it in the next step.\n        </h6>\n        <div>\n          <div className=\"form-group row\">\n            <label className=\"col-sm-2 col-form-label\">Message</label>\n            <div className=\"col-sm-7\">\n              <textarea disabled={this.state.locked} onChange={this.msgChanged} \n                        className=\"form-control\"\n                        rows=\"2\" value = {this.state.msg} />\n            </div>\n            { !this.state.locked ?\n            <div className=\"col-sm-3\">\n              <button disabled={!this.state.msg} \n                      type=\"button\" className=\"btn btn-primary\" onClick={() => this.lockMsg()}>\n                Next\n              </button>\n            </div> : null }\n          </div>\n          { this.state.locked ? \n            <div>\n              <h6>\n                Step 2: Let's choose an account generated by your HDWallet to sign the transaction that deploys \n                our contract containing the above message.\n              </h6>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-2 col-form-label\">HDWallet account index</label>\n                <div className=\"col-sm-2\">\n                  <input type=\"number\" min=\"0\" max=\"10000\" className=\"form-control col-sm-12\" \n                         disabled={this.state.contractDeploying}\n                         value={this.state.hdwalletIndex} onChange={this.hdwalletIndexChanged}></input>\n                </div>\n                { !this.state.contractDeploying ? \n                <div className=\"col-sm-3\">\n                  <button disabled={this.state.fetchingHdwalletIndex || !this.hasHdwalletIndex()} type=\"button\" \n                          className=\"btn btn-primary\" onClick={() => this.fetchHdwallet()}>\n                    Fetch HDWallet account\n                  </button>\n                </div> : null }\n              </div>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-2 col-form-label\">HDWallet address</label>\n                <div className=\"col-sm-7\">\n                  <input type=\"text\" className=\"form-control col-sm-12\" readOnly={true} value={this.state.hdwalletAddress}></input>\n                </div>\n              </div>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-2 col-form-label\">HDWallet signing key</label>\n                <div className=\"col-sm-7\">\n                  <input type=\"text\" className=\"form-control col-sm-12\" readOnly={true} value={this.state.hdwalletPrivateKey}></input>\n                </div>\n                { !this.state.contractDeploying && this.state.hdwalletAddress && this.state.hdwalletPrivateKey ? \n                <div className=\"col-sm-3\">\n                  <button type=\"button\" className=\"btn btn-success\" onClick={() => this.deployingContract()}>\n                    Deploy to blockchain!\n                  </button>\n                </div> : null }\n                { this.state.contractDeploying && !this.state.contractAddress ?\n                <div className=\"col-sm-3\">\n                  <button type=\"button\" disabled={true} className=\"btn btn-success\">\n                    Deploying to blockchain...\n                  </button>\n                </div>\n                : null}\n              </div>\n            </div> : null }\n            { this.state.contractAddress ? \n            <div>\n              <h6>\n                Step 3: Congrats!\n                <br />\n                The contract has been deployed to the following address: <i>{this.state.contractAddress}</i>.\n                <br />\n                On the blockchain ledger, this\n                <a target='blank' href={`https://${this.blockExplorerUrl}/tx/${this.state.transactionHash}?consortia=${this.consortiaId}&environment=${this.nodeRpcEndpoint.substr(8, 10)}`}> transaction </a> \n                shows that it originated from <i>{this.state.contractFrom}</i>. \n                Notice that this is the account you chose to use from your HDWallet and <b>not</b> your Kaleido node's account address. \n                For future transactions, you can sequentially iterate through the wallet accounts and obtain a different signing key for every transaction.\n                For complete anonymity you should never use a signing key more than once. \n              </h6>\n              <br />\n              <h6>Step 4: Verification - lets query the contract's value</h6>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-2 col-form-label\">Contract value</label>\n                <div className=\"col-sm-7\">\n                  <input type=\"text\" className=\"form-control col-sm-12\" readOnly={true} value={this.state.contractValue}></input>\n                </div>\n                {!this.state.contractValue ?\n                <div className=\"col-sm-3\">\n                  <button type=\"button\" className=\"btn btn-primary\" \n                          onClick={() => this.getContractValue()}>\n                    Get contract value\n                  </button>\n                </div> : null }\n              </div>\n              {this.state.contractValue ? \n              <h6>\n                Conclusion: Notice that the value stored in the blockchain contract matches your message above.\n              </h6> : null }\n            </div> : null }\n          </div>  \n      </main>\n    );\n  }\n}\n\nexport default HDwallet;\n","import React, { Component } from 'react';\nimport contractJson from './contracts/ipfs.json'\nimport { Link } from 'react-router-dom';\nimport utils from './utils'\n\nclass IPFS extends Component {\n  constructor(props) {\n    super(props)\n    utils.bindLocalStorage(this)\n    utils.buildWeb3(this)\n    this.state = {     \n      missingConfig: false,\n      selectedFile: null,\n      uploadingFile: false,\n      uploadedFile: false,\n      ipfsHash: '',\n      ipfsLink: '',\n      fileDescription: '',\n      contractDeploying: false,\n      contractAddress: '',\n      contractFileDescription: '',\n      contractIpfsHash: ''\n    }\n  }\n\n  componentDidMount = () => {\n    if (!this.appCredsUsername || !this.appCredsPassword || !this.nodeRpcEndpoint || !this.ipfsRpcEndpoint) {\n      this.setState(() => ({\n        missingConfig: true\n      }))\n    }\n  }\n\n  fileChangedHandler = (event) => {\n    const file = event.target.files[0]\n    if (!file) {\n      this.setState(() => ({\n        selectedFile: null\n      }))\n    } else {\n      this.setState(() => ({\n        selectedFile: file\n      }))  \n    }\n  }\n\n  uploadToIpfs = () => {\n    this.setState(() => ({\n      uploadingFile: true\n    }), () => {\n      const headers = new Headers();\n      headers.append('Authorization', 'Basic ' + btoa(this.appCredsUsername + ':' + this.appCredsPassword));\n      headers.append('Accept', 'application/json, text/plain, */*',)  \n      const formData = new FormData()\n      formData.append('blob', this.state.selectedFile)\n      fetch(`${this.ipfsRpcEndpoint}/add`, {\n        method: 'POST',\n        headers: headers,\n        body: formData\n      })\n      .then(r => r.json())\n      .then(data => {\n        console.log(data)\n        let ipfsLink = utils.buildServiceUrlWithCreds(this, this.ipfsRpcEndpoint)\n        this.setState(() => ({\n          ipfsHash: data.Hash,\n          ipfsLink: `${ipfsLink}/cat/${data.Hash}`,\n          uploadedFile: true,\n          uploadingFile: false\n        })) \n      })\n    }) \n  }\n\n  fileDescriptionChanged = (event) => {\n    const val = event.target.value\n    this.setState(() => ({\n      fileDescription: val\n    })) \n  }\n\n  deployingContract = () => {\n    this.setState(() => ({\n      contractDeploying: true\n    }), () => this.deployContract());\n  }\n\n  async deployContract() {\n    let accounts = await this.web3.eth.personal.getAccounts();\n    if (!accounts || accounts.length === 0) {\n      console.error(\"Can't find accounts in the target node\");\n    }\n    let theContract = utils.getContract(this.web3, contractJson, '', [this.state.fileDescription, this.state.ipfsHash])\n    let deployObj = theContract.encodeABI();\n    let params = {\n      from: accounts[0],\n      gas: 500000000,\n      data: deployObj\n    };\n    this.web3.eth.sendTransaction(params)\n      .on('receipt', (receipt) => {\n        console.log(receipt);\n      })\n      .on('error', (err) => {\n        console.error('Failed to deploy the smart contract. Error: ' + err);\n      })\n      .then((newInstance) => {\n        console.log(newInstance)\n        console.log(`\\tSmart contract deployed, ready to take calls at '${newInstance.contractAddress}'`);\n        this.setState(() => ({\n          contractAddress: newInstance.contractAddress\n        }));\n      });\n  }\n\n  getContractValues = () => {\n    let theContract = utils.getContract(this.web3, contractJson, this.state.contractAddress, []);\n    theContract.methods.get().call().then((data) => {\n      console.log('\\tSmart contract current state: %j', data);\n      this.setState(() => ({\n        contractFileDescription: data['0'],\n        contractIpfsHash: data['1']\n      }));\n    });\n  }\n\n  downloadFile = () => {\n    var headers = new Headers();\n    headers.append('Authorization', 'Basic ' + btoa(this.appCredsUsername + ':' + this.appCredsPassword));\n    headers.append('Accept', 'application/json, text/plain, */*',)\n    let url = `${this.ipfsRpcEndpoint}/get/${this.state.ipfsHash}`\n    fetch(url, {\n      method: 'GET',\n      headers: headers\n    })\n  }\n\n  render() {\n    if (this.state.missingConfig) {\n      return (\n        <main className=\"container\">\n          <h2>IPFS</h2>\n          missing&nbsp;\n          <Link to=\"/\">\n            config\n          </Link>\n        </main>\n      )\n    }\n    return (\n      <main className=\"container\">\n        <h2>IPFS</h2>\n        <h5>\n          The purpose of this sample is to show how you can add a file to IPFS, and then store a \n          description of the file along with the IPFS content hash in a blockchain smart contract. \n          This is a popular pattern for storing large amounts of data off-chain (in IPFS) and storing the \n          reference (IPFS content hash) of where the data is located on-chain.\n        </h5>\n        <br />\n        <h6>\n          Step 1: Add a file to IPFS and retrieve the IPFS hash back once it's been added.\n        </h6>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-2 col-form-label\">Upload a file</label>\n          <div className=\"col-sm-3\">\n            <input disabled={this.state.uploadedFile} type=\"file\" \n                    onChange={this.fileChangedHandler}\n                  ref={this.fileRef} />\n          </div>\n          { !this.state.uploadedFile ?\n          <div className=\"col-sm-5\">\n            <button disabled={!this.state.selectedFile || this.state.uploadingFile} type=\"button\" className=\"btn btn-primary\" \n                    onClick={() => this.uploadToIpfs()}>\n              Upload file\n            </button>\n          </div> : null }\n        </div>\n\n        { this.state.uploadedFile ? \n        <div>\n          <h6>\n            Step 2: The file has been added to IPFS with the following content hash: <i>{this.state.ipfsHash}</i>.\n            <br /> Enter a friendly file description for this file and then we can deploy the smart contract containing\n            the description and IPFS content hash.\n          </h6>\n          <div className=\"form-group row\">\n            <label className=\"col-sm-2 col-form-label\">File description</label>\n            <div className=\"col-sm-7\">\n              <input type=\"text\" className=\"form-control col-sm-12\" readOnly={this.state.contractDeploying}\n                     onChange={this.fileDescriptionChanged} value={this.state.fileDescription} />\n            </div>\n            { !this.state.contractDeploying ? \n            <div className=\"col-sm-3\">\n              <button disabled={!this.state.fileDescription} type=\"button\" className=\"btn btn-success\" \n                      onClick={() => this.deployingContract()}>\n                Deploy to blockchain!\n              </button>\n            </div> : null }\n            { this.state.contractDeploying && !this.state.contractAddress ?\n            <div className=\"col-sm-3\">\n              <button type=\"button\" disabled={true} className=\"btn btn-success\">\n                Deploying to blockchain...\n              </button>\n            </div>\n            : null }\n          </div>\n        </div> : null }\n\n        { this.state.contractAddress ? \n        <div>\n          <h6>\n            Step 3: Congrats!\n            <br />\n            The contract has been deployed to the following address: <i>{this.state.contractAddress}</i>.\n          </h6>\n          <br />\n          <h6>Step 4: Verification - lets query the contract's values</h6>\n          <div className=\"form-group row\">\n            <label className=\"col-sm-2 col-form-label\">File description</label>\n            <div className=\"col-sm-7\">\n              <input type=\"text\" className=\"form-control col-sm-12\" readOnly={true} value={this.state.contractFileDescription}></input>\n            </div>\n          </div>\n          <div className=\"form-group row\">\n            <label className=\"col-sm-2 col-form-label\">IPFS content hash</label>\n            <div className=\"col-sm-7\">\n              <input type=\"text\" className=\"form-control col-sm-12\" readOnly={true} value={this.state.contractIpfsHash}></input>\n            </div>\n            {!this.state.contractFileDescription && !this.state.contractIpfsHash ?\n            <div className=\"col-sm-3\">\n              <button type=\"button\" className=\"btn btn-primary\" \n                      onClick={() => this.getContractValues()}>\n                Get contract values\n              </button>\n            </div> : null }\n          </div>\n        </div> : null }\n\n        { this.state.contractFileDescription && this.state.contractIpfsHash ?\n        <div>\n          <h6>Conclusion: Download file from IPFS using the IPFS content hash</h6>\n          <div className=\"col-sm-3\">\n            <a href={this.state.ipfsLink}          \n               target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-primary\">\n              Download file\n            </a>\n          </div>\n        </div> : null }\n      </main>\n    );\n  }\n}\n\nexport default IPFS;\n","import React, { Component } from 'react';\nimport utils from './utils'\nimport { Link } from 'react-router-dom';\n\nclass OpenLaw extends Component {\n  constructor(props) {\n    super(props)\n    utils.bindLocalStorage(this)\n    utils.buildWeb3(this)\n    this.state = {     \n      missingConfig: false,\n      openlawUrl: '',\n      sampleAgreement: `\n      This is an angreement between two parties: [[PartyA | Uppercase]] and [[PartyB | Uppercase]] and is made as of [[Effective Date: Date]].  Both parties agree that the next time they see each other a high-five will take place in which one person raises their right-hand in a vertical orientation with their fingers and thumb either together or spread slightly apart and the other person does the same.  Then they slap their palms together in a momentary fashion to create a slappy noise.\n        \n**[[PartyA | Uppercase]]:**\n\n[[PartyA Email: Identity]]\n__________________________________________\n\n\n**[[PartyB | Uppercase]]:**\n\n[[PartyB Email: Identity]]\n__________________________________________\n\n      `,\n      sampleAgreementTitle: 'High Five'\n    }\n  }\n\n  componentDidMount = () => {\n    if (!this.appCredsUsername || !this.appCredsPassword || !this.nodeRpcEndpoint || !this.openlawRpcEndpoint) {\n      this.setState(() => ({\n        missingConfig: true\n      }))\n      return\n    }\n    this.setState(() => ({\n      openlawUrl: utils.buildServiceUrlWithCreds(this, this.openlawRpcEndpoint),\n      openlawTemplateUrl: utils.buildServiceUrlWithCreds(this, this.openlawRpcEndpoint) + '/template/raw/test'\n    }))\n  }\n\n  // fetchTemplate = () => {\n  //   console.log('fetching')\n  //   const headers = new Headers();\n  //   headers.append('Authorization', 'Basic ' + btoa(this.appCredsUsername + ':' + this.appCredsPassword));\n  //   headers.append('content-type', 'application/json')\n  //   headers.append('Accept', 'application/json, text/plain, */*')\n  //   let url = this.openlawRpcEndpoint + '/user/details?email=joseph.bonfiglio@consensys.net'\n  //   // let url = this.openlawRpcEndpoint + '/template/raw/test'\n  //   return fetch(url, {\n  //     method: 'GET',\n  //     headers: headers\n  //   }).then(response => response.json())\n  //   .then(response => console.log(response))\n  // }\n\n  // createTemplate = () => {\n  //   console.log('creating')\n  //   const headers = new Headers();\n  //   headers.append('Authorization', 'Basic ' + btoa(this.appCredsUsername + ':' + this.appCredsPassword));\n  //   headers.append('content-type', 'text/plain;charset=UTF-8')\n  //   headers.append('Accept', 'application/json, text/plain, */*')\n  //   let url = `${this.openlawRpcEndpoint}/upload/template/${this.state.sampleAgreementTitle}`\n  //   return fetch(url, {\n  //     method: 'POST',\n  //     headers: headers,\n  //     credentials: 'include'\n  //   }).then(response => response.json())\n  //   .then(response => console.log(response))\n  // }\n\n  render() {\n    if (this.state.missingConfig) {\n      return (\n        <main className=\"container\">\n          <h2>OpenLaw</h2>\n          missing&nbsp;\n          <Link to=\"/\">\n            config\n          </Link>\n        </main>\n      )\n    }\n    return (\n      <main className=\"container\">\n        <h2>OpenLaw</h2>\n        <h5>\n          The purpose of this sample is to show how you can create an OpenLaw template which triggers an embedded smart contract \n          once it's signed by all parties involved.\n        </h5>\n        <br />\n        <h6>\n          Step 1: \n          <a href={this.state.openlawUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-link\">\n            Login to your OpenLaw instance and play\n          </a>\n        </h6>\n        \n        \n      </main>\n    );\n  }\n}\n\nexport default OpenLaw;\n","import React, { Component } from 'react';\nimport utils from './utils'\nimport { Link } from 'react-router-dom';\n\nclass IDregistry extends Component {\n  constructor(props) {\n    super(props)\n    utils.bindLocalStorage(this)\n    utils.buildWeb3(this)\n    this.state = {     \n      missingConfig: false\n    }\n  }\n\n  componentDidMount = () => {\n  }\n\n  render() {\n    if (this.state.missingConfig) {\n      return (\n        <main className=\"container\">\n          <h2>IPFS</h2>\n          missing&nbsp;\n          <Link to=\"/\">\n            config\n          </Link>\n        </main>\n      )\n    }\n    return (\n      <main className=\"container\">\n        <h2>ID Registry</h2>\n        <h5>\n          coming soon\n        </h5>\n        <br />        \n      </main>\n    );\n  }\n}\n\nexport default IDregistry;\n","import React, { Component } from 'react';\nimport contractJson from './contracts/auditlog.json'\nimport utils from './utils'\nimport { Link } from 'react-router-dom';\nimport { Timeline, TimelineBlip } from 'react-event-timeline'\nimport JSONPretty from 'react-json-pretty';\n\nclass AuditLog extends Component {\n  constructor(props) {\n    super(props)\n    utils.bindLocalStorage(this)\n    utils.buildWeb3(this)\n    this.state = {     \n      missingConfig: false,\n      contractDeploying: false,\n      contractExistsInLocalStorage: localStorage.getItem('auditLogContractAddress') ? true : false,\n      contractAddress: localStorage.getItem('auditLogContractAddress'),\n      validMsg: false,\n      msg: '',\n      addingMsg: false,\n      auditRecordCount: 0,\n      viewRecordId: 0,\n      viewRecordEntityAddress: '',\n      viewPrettyJson: '',\n      viewJsonMessage: 'click record on left to view transaction details'\n    }\n  }\n\n  componentDidMount = () => {\n    if (!this.appCredsUsername || !this.appCredsPassword || !this.nodeRpcEndpoint) {\n      this.setState(() => ({\n        missingConfig: true\n      }))\n      return\n    }\n    if (this.state.contractAddress) {\n      this.getNumberOfRecords()\n    }\n  }\n\n  deployingContract = () => {\n    this.setState(() => ({\n      contractDeploying: true\n    }), () => this.deployContract());\n  }\n\n  clearContract = () => {\n    localStorage.removeItem('auditLogContractAddress')\n    window.location.reload();\n  }\n\n  async getNumberOfRecords() {\n    let theContract = utils.getContract(this.web3, contractJson, this.state.contractAddress, []);\n    let records = await theContract.methods.getSize().call()\n    this.setState(() => ({\n      auditRecordCount: Number.parseInt(records)\n    }))\n  }\n\n  async deployContract() {\n    let accounts = await this.web3.eth.personal.getAccounts();\n    let theContract = utils.getContract(this.web3, contractJson, '', [])\n    let deployObj = theContract.encodeABI();\n    let params = {\n      from: accounts[0],\n      gas: 500000000,\n      data: deployObj\n    };\n    this.web3.eth.sendTransaction(params)\n      .on('receipt', (receipt) => {\n        console.log(receipt);\n      })\n      .on('error', (err) => {\n        console.error('Failed to deploy the smart contract. Error: ' + err);\n      })\n      .then((newInstance) => {\n        console.log(newInstance)\n        console.log(`\\tSmart contract deployed, ready to take calls at '${newInstance.contractAddress}'`);\n        this.setState(() => ({\n          contractAddress: newInstance.contractAddress,\n          contractExistsInLocalStorage: true\n        }), () => localStorage.setItem('auditLogContractAddress', newInstance.contractAddress));\n      });\n  }\n\n  msgChanged = (event) => {\n    const val = event.target.value\n    this.setState(() => ({\n      msg: val,\n      validMsg: this.isJSON(val)\n    }));\n  };\n\n  isJSON = (str) => {\n    if( typeof( str ) !== 'string' ) { \n      return false;\n    }\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  addMsg = () => {\n    this.setState(() => ({\n      addingMsg: true\n    }), async () => {\n      let theContract = utils.getContract(this.web3, contractJson, this.state.contractAddress, [])\n      let accounts = await this.web3.eth.personal.getAccounts();\n      if (!accounts || accounts.length === 0) {\n        console.error(\"Can't find accounts in the target node\");\n      }\n      let params = {\n        from: accounts[0],\n        gas: 5000000\n      };\n      await theContract.methods.push(accounts[0], this.state.msg).send(params)\n        .on('error', (err) => {\n          console.error('Failed to call the smart contract. Error: ' + err);\n        })\n        .then((resp) => {\n          console.log(resp)\n          this.setState(() => ({\n            msg: '',\n            addingMsg: false,\n            validMsg: false,\n            auditRecordCount: this.state.auditRecordCount + 1\n          }), () => this.fetchRecord(this.state.auditRecordCount - 1));\n        });\n    });\n  };\n\n  renderTimelines() {\n    let records = [];\n    for (let i = this.state.auditRecordCount - 1; i >= 0; i--) {\n      let color = i % 2 === 0 ? \"#03a9f4\" : \"#6fba1c\"\n      records.push(\n        <TimelineBlip\n          key={i+1}\n          title={`#${i+1}`}\n          iconColor={color}\n          onClick={() => this.fetchRecord(i)} />)\n    }\n    return records;\n  }\n\n  fetchRecord = (index) => {\n    this.setState(() => ({\n      fetchingRecord: true,\n      viewJsonMessage: `Fetching record #${index+1}...`\n    }), async () => {\n      let theContract = utils.getContract(this.web3, contractJson, this.state.contractAddress, []);\n      let record = await theContract.methods.logEntries(index).call()\n      this.setState(() => ({\n        viewRecordId: index+1,\n        viewPrettyJson: record.payload,\n        viewRecordEntityAddress: record.entityAddress,\n        fetchingRecord: false\n      }));\n    });\n  }\n\n  render() {\n    if (this.state.missingConfig) {\n      return (\n        <main className=\"container\">\n          <h2>Audit Log</h2>\n          missing&nbsp;\n          <Link to=\"/\">\n            config\n          </Link>\n        </main>\n      )\n    }\n    const timelinePanel = {\n      overflowY: 'scroll',\n      maxHeight: '500px'\n    }\n    return (\n      <main className=\"container\">\n        <h2>Audit Log</h2>\n        <h5>\n          The purpose of this sample is to show how you can use a simple smart contract as an audit log to view records\n          as they're submitted over time.\n        </h5>\n        <br />\n        { !this.state.contractExistsInLocalStorage ? \n        <div>\n          <h6>\n            Step 1: Deploy audit log contract to track log records going forward\n          </h6>\n          { !this.state.contractDeploying ?\n          <div className=\"col-sm-3\">\n            <button type=\"button\" className=\"btn btn-success\" \n                    onClick={() => this.deployingContract()}>\n              Deploy to blockchain!\n            </button>\n          </div> : null }\n          { this.state.contractDeploying && !this.state.contractAddress ?\n          <div className=\"col-sm-3\">\n            <button type=\"button\" disabled={true} className=\"btn btn-success\">\n              Deploying to blockchain...\n            </button>\n          </div> : null }\n        </div> : null }\n        { this.state.contractAddress ? \n        <div>\n          <h6>\n            The audit log contract has been deployed to the following address: <i>{this.state.contractAddress}</i>.\n            If you want to start over with a fresh contract,\n            <button className=\"btn btn-sm btn-link\" onClick={() => this.clearContract()}>click here</button>\n          </h6>\n          <br />\n          <h6>Add new log record by calling a function on the smart contract</h6>\n          <div className=\"form-group row\">\n            <label className=\"col-sm-2 col-form-label\">JSON payload</label>\n            <div className=\"col-sm-7\">\n              <textarea disabled={this.state.addingMsg} onChange={this.msgChanged} \n                        className=\"form-control\"\n                        rows=\"3\" value = {this.state.msg} />\n            </div>\n            <div className=\"col-sm-3\">\n              <button disabled={this.state.addingMsg || !this.state.validMsg} \n                      type=\"button\" className=\"btn btn-primary\" onClick={() => this.addMsg()}>\n                {this.state.addingMsg ? \"Adding...\" : \"Add\"}\n              </button>\n              {this.state.msg && !this.state.validMsg ? \" invalid json \" : \"\"}\n            </div>\n          </div>\n          {this.state.auditRecordCount > 0 ?\n          <div>\n            <hr />\n            <h6>Audit log history (most recent records appear at top)</h6>\n            <br />\n            <div className=\"row col-sm-12\">\n              <div style={timelinePanel} className=\"col-sm-3\">\n                <Timeline>\n                  {this.renderTimelines()}\n                </Timeline>\n              </div>\n              <div className=\"col-sm-8\">\n                { !this.state.fetchingRecord && this.state.viewRecordId > 0 ?\n                <div>\n                  <div className=\"form-group row\">\n                    <label className=\"col-sm-2 col-form-label\">Record #</label>\n                    <div className=\"col-sm-10\">\n                      <input type=\"text\" readOnly={true} className=\"form-control-plaintext\" value={this.state.viewRecordId}></input>\n                    </div>\n                  </div>\n                  <div className=\"form-group row\">\n                    <label className=\"col-sm-2 col-form-label\">Entity address</label>\n                    <div className=\"col-sm-10\">\n                      <input type=\"text\" readOnly={true} className=\"form-control-plaintext\" value={this.state.viewRecordEntityAddress}></input>\n                    </div>\n                  </div>\n                  <div className=\"form-group row\">\n                    <label className=\"col-sm-2 col-form-label\">Payload</label>\n                    <div className=\"col-sm-10\">\n                      <JSONPretty id=\"json-pretty\" json={this.state.viewPrettyJson} className=\"form-control-plaintext\"></JSONPretty>\n                    </div>\n                  </div> \n                </div> : \n                <div>\n                  { this.state.viewJsonMessage }\n                </div> }\n              </div>\n            </div>\n          </div> : null }\n        </div> : null }\n      </main>\n    );\n  }\n}\n\nexport default AuditLog;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Configure from './Configure'\nimport HDwallet from './HDwallet'\nimport IPFS from './IPFS'\nimport OpenLaw from './OpenLaw'\nimport IDregistry from './IDregistry'\nimport AuditLog from './AuditLog'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <header className=\"\">\n            <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" \n                  rel=\"stylesheet\" \n                  integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" \n                  crossOrigin=\"anonymous\" />\n            <div>\n              <Link to=\"/\">\n                <button className=\"btn btn-link\">Configure</button>\n              </Link>\n              <Link to=\"/hdwallet\">\n                <button className=\"btn btn-link\">HDWallet</button>\n              </Link>\n              <Link to=\"/ipfs\">\n                <button className=\"btn btn-link\">IPFS</button>\n              </Link>\n              <Link to=\"/idregistry\">\n                <button className=\"btn btn-link\">ID Registry</button>\n              </Link>\n              <Link to=\"/openlaw\">\n                <button className=\"btn btn-link\">OpenLaw</button>\n              </Link>\n              <Link to=\"/auditlog\">\n                <button className=\"btn btn-link\">Audit Log</button>\n              </Link>\n            </div>\n          </header>\n          <hr />\n          <div>\n            <Route exact path=\"/\" component={Configure} />\n            <Route exact path=\"/hdwallet\" component={HDwallet} />\n            <Route exact path=\"/ipfs\" component={IPFS} />\n            <Route exact path=\"/idregistry\" component={IDregistry} />\n            <Route exact path=\"/openlaw\" component={OpenLaw} />\n            <Route exact path=\"/auditlog\" component={AuditLog} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}